import Command from '../Command';
export declare abstract class InsertBase<R> extends Command<R> {
    constructor(table: string);
    /**
    Generates a string like:
      INSERT INTO responses (user_id, experiment_id, stimulus_id, value)
        VALUES ($1, $2, $3, $4)
    */
    toSQL(): string;
    _add(column: string, value: any): this;
    add(column: string, value: any): this;
    _set(hash: {
        [index: string]: any;
    }): this;
    /**
    This function presumes that all hash keys are safe, and all object values are unsafe.
  
    Ignores undefined values.
    */
    set(hash: {
        [index: string]: any;
    }): this;
    _returning(...columns: string[]): this;
    /**
    Call like:
  
        db.Insert('users').set({name: 'Chris'}).returning('*')
  
    to get back the full inserted row. Useful if you want the primary key or
    other generated / default values.
    */
    returning(...columns: string[]): this;
}
export default class Insert extends InsertBase<any[]> {
}
/**
The user is still responsible for adding the .returning('*') clause.
*/
export declare class InsertOne extends InsertBase<any> {
    constructor(table: string);
}
