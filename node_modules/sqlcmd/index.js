"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const Command_1 = require("./Command");
exports.Command = Command_1.default;
const CreateTable_1 = require("./commands/CreateTable");
const Delete_1 = require("./commands/Delete");
const Insert_1 = require("./commands/Insert");
const Select_1 = require("./commands/Select");
const Update_1 = require("./commands/Update");
/**
Connection provides a single interface to functionality of sqlcmd, and stores
configuration defaults to be used with every query. The options are unused in
sqlcmd -- only sqlcmd-pg, sqlcmd-sqlite3, etc., use the options argument.

Events:
  .on('log', ({level, format, args}) => { ... })

*/
class Connection extends events_1.EventEmitter {
    constructor(options) {
        super();
        this.options = options;
    }
    CreateTable(table) {
        const command = new CreateTable_1.default(table);
        command.connection = this;
        return command;
    }
    Delete(table) {
        const command = new Delete_1.default(table);
        command.connection = this;
        return command;
    }
    Insert(table) {
        const command = new Insert_1.default(table);
        command.connection = this;
        return command;
    }
    InsertOne(table) {
        const command = new Insert_1.InsertOne(table);
        command.connection = this;
        return command;
    }
    Select(table) {
        const command = new Select_1.default(table);
        command.connection = this;
        return command;
    }
    SelectOne(table) {
        const command = new Select_1.SelectOne(table);
        command.connection = this;
        return command;
    }
    Update(table) {
        const command = new Update_1.default(table);
        command.connection = this;
        return command;
    }
    UpdateOne(table) {
        const command = new Update_1.UpdateOne(table);
        command.connection = this;
        return command;
    }
}
exports.Connection = Connection;
